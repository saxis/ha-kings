{"ast":null,"code":"import { isPlatformBrowser } from '@angular/common';\nimport { InjectionToken, PLATFORM_ID } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nexport const WINDOW = new InjectionToken('WindowToken');\nexport class WindowRef {\n  get nativeWindow() {\n    throw new Error('Not implemented');\n  }\n}\nexport class BrowserWindowRef extends WindowRef {\n  constructor() {\n    super();\n  }\n  get nativeWindow() {\n    return window;\n  }\n  static {\n    this.ɵfac = function BrowserWindowRef_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || BrowserWindowRef)();\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: BrowserWindowRef,\n      factory: BrowserWindowRef.ɵfac\n    });\n  }\n}\nexport function windowFactory(browserWindowRef, platformId) {\n  if (isPlatformBrowser(platformId)) {\n    return browserWindowRef.nativeWindow;\n  }\n  return new Object();\n}\nconst browserWindowProvider = {\n  provide: WindowRef,\n  useClass: BrowserWindowRef\n};\nconst windowProvider = {\n  provide: WINDOW,\n  useFactory: windowFactory,\n  deps: [WindowRef, PLATFORM_ID]\n};\nexport const WINDOW_PROVIDERS = [browserWindowProvider, windowProvider];","map":{"version":3,"names":["isPlatformBrowser","InjectionToken","PLATFORM_ID","WINDOW","WindowRef","nativeWindow","Error","BrowserWindowRef","constructor","window","factory","ɵfac","windowFactory","browserWindowRef","platformId","Object","browserWindowProvider","provide","useClass","windowProvider","useFactory","deps","WINDOW_PROVIDERS"],"sources":["/Users/saxis/dev/angular_projects/ha-kings/src/app/core/services/window.service.ts"],"sourcesContent":["import { isPlatformBrowser } from '@angular/common';\nimport { ClassProvider, FactoryProvider, InjectionToken, PLATFORM_ID, Injectable } from '@angular/core';\n\nexport const WINDOW = new InjectionToken('WindowToken');\n\nexport abstract class WindowRef {\n\n  get nativeWindow(): Window | Object {\n    throw new Error('Not implemented');\n  }\n}\n\n@Injectable()\nexport class BrowserWindowRef extends WindowRef {\n  constructor() {\n    super();\n  }\n\n  get nativeWindow(): Window | Object {\n    return window;\n  }\n}\n\nexport function windowFactory(browserWindowRef: BrowserWindowRef, platformId: Object): Window | Object {\n  if (isPlatformBrowser(platformId)) {\n    return browserWindowRef.nativeWindow;\n  }\n  return new Object();\n}\n\nconst browserWindowProvider: ClassProvider = {\n  provide: WindowRef,\n  useClass: BrowserWindowRef\n};\n\nconst windowProvider: FactoryProvider = {\n  provide: WINDOW,\n  useFactory: windowFactory,\n  deps: [ WindowRef, PLATFORM_ID ]\n};\n\nexport const WINDOW_PROVIDERS = [\n  browserWindowProvider,\n  windowProvider\n]\n"],"mappings":"AAAA,SAASA,iBAAiB,QAAQ,iBAAiB;AACnD,SAAyCC,cAAc,EAAEC,WAAW,QAAoB,eAAe;;AAEvG,OAAO,MAAMC,MAAM,GAAG,IAAIF,cAAc,CAAC,aAAa,CAAC;AAEvD,OAAM,MAAgBG,SAAS;EAE7B,IAAIC,YAAYA,CAAA;IACd,MAAM,IAAIC,KAAK,CAAC,iBAAiB,CAAC;EACpC;;AAIF,OAAM,MAAOC,gBAAiB,SAAQH,SAAS;EAC7CI,YAAA;IACE,KAAK,EAAE;EACT;EAEA,IAAIH,YAAYA,CAAA;IACd,OAAOI,MAAM;EACf;;;uCAPWF,gBAAgB;IAAA;EAAA;;;aAAhBA,gBAAgB;MAAAG,OAAA,EAAhBH,gBAAgB,CAAAI;IAAA;EAAA;;AAU7B,OAAM,SAAUC,aAAaA,CAACC,gBAAkC,EAAEC,UAAkB;EAClF,IAAId,iBAAiB,CAACc,UAAU,CAAC,EAAE;IACjC,OAAOD,gBAAgB,CAACR,YAAY;EACtC;EACA,OAAO,IAAIU,MAAM,EAAE;AACrB;AAEA,MAAMC,qBAAqB,GAAkB;EAC3CC,OAAO,EAAEb,SAAS;EAClBc,QAAQ,EAAEX;CACX;AAED,MAAMY,cAAc,GAAoB;EACtCF,OAAO,EAAEd,MAAM;EACfiB,UAAU,EAAER,aAAa;EACzBS,IAAI,EAAE,CAAEjB,SAAS,EAAEF,WAAW;CAC/B;AAED,OAAO,MAAMoB,gBAAgB,GAAG,CAC9BN,qBAAqB,EACrBG,cAAc,CACf","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}