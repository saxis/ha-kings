{"ast":null,"code":"import { __esDecorate, __runInitializers } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Asset } from '../../models/asset.model';\nimport { map } from 'rxjs/operators';\nlet AssetsComponent = (() => {\n  let _classDecorators = [Component({\n    selector: 'app-assets',\n    templateUrl: './assets.component.html',\n    styleUrls: ['./assets.component.sass']\n  })];\n  let _classDescriptor;\n  let _classExtraInitializers = [];\n  let _classThis;\n  var AssetsComponent = class {\n    static {\n      _classThis = this;\n    }\n    static {\n      const _metadata = typeof Symbol === \"function\" && Symbol.metadata ? Object.create(null) : void 0;\n      __esDecorate(null, _classDescriptor = {\n        value: _classThis\n      }, _classDecorators, {\n        kind: \"class\",\n        name: _classThis.name,\n        metadata: _metadata\n      }, null, _classExtraInitializers);\n      AssetsComponent = _classThis = _classDescriptor.value;\n      if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value: _metadata\n      });\n      __runInitializers(_classThis, _classExtraInitializers);\n    }\n    constructor(afs, as) {\n      this.afs = afs;\n      this.as = as;\n      this.as.afAuth.authState.subscribe(user => {\n        if (user) {\n          this.userId = user.uid;\n        }\n      });\n    }\n    ngOnInit() {\n      // Need to get the current month and then add a where clause for the current month only\n      this.assetsCollection = this.afs.collection('assets', ref => ref.where('owner', '==', this.userId));\n      this.assetsList$ = this.assetsCollection.snapshotChanges().pipe(map(actions => {\n        return actions.map(a => {\n          const data = a.payload.doc.data();\n          const id = a.payload.doc.id;\n          return {\n            id,\n            ...data\n          };\n        });\n      }));\n    }\n    removeAsset(asset) {\n      const doc = this.afs.doc(`assets/${asset.id}`);\n      doc.delete();\n    }\n    onSubmit(f) {\n      const purchase_val = Number(f.value.balance * f.value.purchase_price_per_full_unit).toFixed(2);\n      const current_val = Number(f.value.balance * f.value.current_price_per_full_unit).toFixed(2);\n      const debt = new Asset(f.value.asset_denomination, f.value.balance, f.value.purchase_price_per_full_unit, f.value.current_price_per_full_unit, purchase_val, current_val, this.userId);\n      const data = JSON.parse(JSON.stringify(debt));\n      this.assetsCollection.add(data);\n      f.reset();\n    }\n  };\n  return AssetsComponent = _classThis;\n})();\nexport { AssetsComponent };","map":{"version":3,"names":["Component","Asset","map","AssetsComponent","selector","templateUrl","styleUrls","__esDecorate","_classDescriptor","value","_classThis","_classDecorators","kind","name","metadata","_metadata","_classExtraInitializers","__runInitializers","constructor","afs","as","afAuth","authState","subscribe","user","userId","uid","ngOnInit","assetsCollection","collection","ref","where","assetsList$","snapshotChanges","pipe","actions","a","data","payload","doc","id","removeAsset","asset","delete","onSubmit","f","purchase_val","Number","balance","purchase_price_per_full_unit","toFixed","current_val","current_price_per_full_unit","debt","asset_denomination","JSON","parse","stringify","add","reset"],"sources":["/Users/saxis/dev/angular_projects/ha-kings/src/app/assets/assets.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { Asset } from '../../models/asset.model';\nimport { NgForm } from '@angular/forms';\nimport { AngularFirestore, AngularFirestoreCollection } from '@angular/fire/firestore';\nimport { Observable } from 'rxjs';\nimport { AuthService } from '../core/auth.service';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-assets',\n  templateUrl: './assets.component.html',\n  styleUrls: ['./assets.component.sass']\n})\nexport class AssetsComponent implements OnInit {\n  assetsCollection: AngularFirestoreCollection<Asset>;\n  assetsList$: Observable<Asset[]>;\n  userId: string;\n\n  constructor(private afs: AngularFirestore, private as: AuthService) {\n    this.as.afAuth.authState.subscribe(user => {\n      if (user) {\n        this.userId = user.uid;\n      }\n    });\n  }\n\n  ngOnInit() {\n    // Need to get the current month and then add a where clause for the current month only\n\n    this.assetsCollection = this.afs.collection('assets', ref => ref.where('owner', '==', this.userId));\n    this.assetsList$ = this.assetsCollection.snapshotChanges().pipe(\n      map(actions => {\n        return actions.map(a => {\n          const data = a.payload.doc.data() as Asset;\n          const id = a.payload.doc.id;\n          return { id, ...data };\n        });\n      })\n    );\n  }\n\n  removeAsset(asset) {\n    const doc = this.afs.doc(`assets/${asset.id}`);\n    doc.delete();\n  }\n\n  onSubmit(f: NgForm) {\n    const purchase_val = Number(f.value.balance * f.value.purchase_price_per_full_unit).toFixed(2);\n    const current_val = Number(f.value.balance * f.value.current_price_per_full_unit).toFixed(2);\n\n    const debt = new Asset(f.value.asset_denomination, f.value.balance, f.value.purchase_price_per_full_unit,\n      f.value.current_price_per_full_unit, purchase_val, current_val, this.userId);\n\n    const data = JSON.parse(JSON.stringify(debt));\n\n    this.assetsCollection.add(data);\n\n    f.reset();\n  }\n\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}